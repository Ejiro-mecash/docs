{
  "openapi": "3.0.3",
  "info": {
    "title": "meCash API",
    "version": "3.0.3",
    "description": "API for meCash services, including FIAT and Ramp operations. This is the OpenAPI specification for the meCash API, covering all available endpoints for wallet management, currency quotes, and payouts.\n\nIt follows a design-first approach based on OpenAPI 3.0.\n\nAuthentication is handled via an API key passed in the `x-api-key` header. Replace `YOUR_API_KEY` with your actual key when making requests.\n\nSome useful links:\n- [meCash Documentation](https://docs.me-cash.com/)\n- [Authentication Guide](https://docs.me-cash.com/authentication)"
  },
  "servers": [
    {
      "url": "https://devapi.me-cash.com",
      "description": "Production server"
    },
    {
      "url": "https://sandbox.api.me-cash.com",
      "description": "Sandbox server for testing"
    }
  ],
  "tags": [
    {
      "name": "Wallet",
      "description": "Wallet management operations"
    },
    {
      "name": "Quote",
      "description": "Currency quote operations"
    },
    {
      "name": "Payout",
      "description": "Payout operations"
    },
    {
      "name": "Transaction",
      "description": "Transaction management"
    },
    {
      "name": "Virtual Account",
      "description": "Virtual account operations"
    },
    {
      "name": "Ramp",
      "description": "Ramp operations for crypto"
    },
    {
      "name": "Miscellaneous",
      "description": "Utility and miscellaneous operations"
    }
  ],
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      }
    },
    "schemas": {
      "Success": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          },
          "message": {
            "type": "string",
            "example": "Operation completed successfully."
          },
          "data": {
            "type": "object",
            "description": "The payload of the successful response."
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "errorCode": {
            "type": "string",
            "description": "A unique code for the error that occurred.",
            "example": "INVALID_PARAMETER"
          },
          "message": {
            "type": "string",
            "example": "An error occurred."
          }
        }
      }
    },
    "responses": {
      "Success": {
        "description": "The request was successful.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Success"
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad Request. The server could not process the request due to a client error (e.g., malformed request syntax, invalid parameters).",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "InvalidParameter": {
                "summary": "Invalid Parameter",
                "value": {
                  "status": "error",
                  "errorCode": "INVALID_PARAMETER",
                  "message": "A request parameter is invalid."
                }
              },
              "MissingParameter": {
                "summary": "Bad Request",
                "value": {
                  "status": "error",
                  "errorCode": "BAD_REQUEST",
                  "message": "The request was unacceptable, often due to a missing required parameter."
                }
              }
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized. The request requires a valid API key.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "status": "error",
              "errorCode": "UNAUTHORIZED",
              "message": "No valid API key provided."
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden. The provided API key does not have permission to perform this request.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "status": "error",
              "errorCode": "FORBIDDEN",
              "message": "The API key doesn't have permissions to perform the request."
            }
          }
        }
      },
      "NotFound": {
        "description": "Not Found. The requested resource could not be found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "status": "error",
              "errorCode": "NOT_FOUND",
              "message": "The requested resource doesn't exist."
            }
          }
        }
      },
      "TooManyRequests": {
        "description": "Too Many Requests. You have hit the rate limit. Please try again later.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "status": "error",
              "errorCode": "TOO_MANY_REQUESTS",
              "message": "Too many requests hit the API too quickly."
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error. We had a problem with our server. Try again later.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "status": "error",
              "errorCode": "INTERNAL_SERVER_ERROR",
              "message": "We had a problem with our server. Try again later."
            }
          }
        }
      },
      "ServiceUnavailable": {
        "description": "Service Unavailable. The server is temporarily unavailable. Please try again later.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "status": "error",
              "errorCode": "SERVICE_UNAVAILABLE",
              "message": "The server is temporarily unavailable."
            }
          }
        }
      }
    }
  },
  "paths": {
    "/v1/wallet": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get All Wallets",
        "description": "This API is used to fetch all wallets for a user.",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of all user wallets retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "balance": {
                            "type": "number"
                          },
                          "currency": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "message": "wallets fetched successfully",
                  "status": "success",
                  "data": [
                    {
                      "id": "fdef9aac-bd91-4ab0-b866-xxxxxxxxxxxx",
                      "balance": 11262.00,
                      "currency": "MWK",
                      "country": "MW"
                    },
                    {
                      "id": "e19ff27f-9ed4-41f7-b622-c39f9296e2e6",
                      "balance": 2255.27,
                      "currency": "NGN",
                      "country": "NG"
                    },
                    {
                      "id": "78f2dc44-374f-4129-8984-5482437b7568",
                      "balance": 30.00,
                      "currency": "RWF",
                      "country": "RW"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/wallet/balance": {
      "put": {
        "tags": [
          "Wallet"
        ],
        "summary": "Update Wallet Balance",
        "description": "This API updates the user's wallet balance for a specified currency.",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["amount", "country", "currency"],
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "Amount to update"
                  },
                  "country": {
                    "type": "string",
                    "description": "Country code"
                  },
                  "currency": {
                    "type": "string",
                    "description": "Currency code"
                  }
                }
              },
              "example": {
                "amount": 0,
                "country": "NG",
                "currency": "NGN"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Wallet balance updated successfully."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/wallet/{walletId}/balance": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get Wallet Balance",
        "description": "This API fetches the balance of a specific wallet.",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the wallet"
          }
        ],
        "responses": {
          "200": {
            "description": "Wallet balance retrieved successfully.",
            "content": {
              "application/json": {
                "example": {
                  "status": "success",
                  "message": "Wallet balance retrieved successfully",
                  "data": {
                    "walletId": "wal_01HZX8W9K2Q1",
                    "currency": "NGN",
                    "country": "NG",
                    "balance": "250000.50",
                    "available": "240000.50",
                    "updatedAt": "2024-08-01T10:15:30Z"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/quote": {
      "post": {
        "tags": [
          "Quote"
        ],
        "summary": "Create Quote",
        "description": "Creates a quote for a source and destination currency specified by a user. It also returns related business rules.",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "Details for the new quote.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["paymentChannel", "source", "target"],
                "properties": {
                  "paymentChannel": {
                    "type": "string",
                    "description": "Payment method for the transaction."
                  },
                  "source": {
                    "type": "object",
                    "required": ["amount", "country", "currency"],
                    "properties": {
                      "amount": {
                        "type": "number",
                        "format": "float",
                        "description": "Amount in the source currency."
                      },
                      "country": {
                        "type": "string",
                        "description": "Source country code (ISO 3166-1 alpha-2)."
                      },
                      "currency": {
                        "type": "string",
                        "description": "Source currency code (ISO 4217)."
                      }
                    }
                  },
                  "target": {
                    "type": "object",
                    "required": ["country", "currency"],
                    "properties": {
                      "country": {
                        "type": "string",
                        "description": "Target country code (ISO 3166-1 alpha-2)."
                      },
                      "currency": {
                        "type": "string",
                        "description": "Target currency code (ISO 4217)."
                      }
                    }
                  }
                }
              },
              "examples": {
                "NGN_to_USD": {
                  "summary": "NGN to USD Quote",
                  "description": "An example quote for converting Nigerian Naira to US Dollars.",
                  "value": {
                    "paymentChannel": "BANK_TRANSFER",
                    "source": {
                      "amount": 100000,
                      "country": "NG",
                      "currency": "NGN"
                    },
                    "target": {
                      "country": "US",
                      "currency": "USD"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Quote created successfully.",
            "content": {
              "application/json": {
                "example": {
                  "status": "success",
                  "message": "Quote created successfully",
                  "data": {
                    "quoteId": "qte_01HZXXF9PMQW",
                    "paymentChannel": "BANK_TRANSFER",
                    "rate": "0.00123",
                    "expiresAt": "2024-08-01T10:20:00Z",
                    "source": {
                      "amount": "100000.00",
                      "currency": "NGN",
                      "country": "NG"
                    },
                    "target": {
                      "amount": "123.00",
                      "currency": "USD",
                      "country": "US"
                    },
                    "fees": {
                      "total": "500.00",
                      "breakdown": [
                        { "type": "processing_fee", "amount": "300.00" },
                        { "type": "network_fee", "amount": "200.00" }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  }
}